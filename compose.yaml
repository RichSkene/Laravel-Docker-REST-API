services:
  app:
    build:
      context: .
      target: development
    ports:
      - 9000:9000
    volumes:
      - code:/app
      - ./:/app
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
    #   - ./package.json:/app/package.json:ro
    #   - ./package-lock.json:/app/package-lock.json:ro
    #   - ./tsconfig.json:/app/tsconfig.json:ro
  server:
    image: nginx:1.27.2
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - 8000:80
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/:ro
      - code:/app:ro

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
volumes:
  code:
# secrets:
#   db-password:
#     file: db/password.txt

